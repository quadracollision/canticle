//! Shared font rendering module for the Canticlec Churn Music Sequencer
//! Provides consistent 8x12 bitmap font rendering across all UI components

use std::collections::HashMap;

/// 8x12 bitmap font renderer
pub struct Font {
    patterns: HashMap<char, [u8; 12]>,
}

impl Font {
    pub fn new() -> Self {
        let mut patterns = HashMap::new();
        
        // Define all character patterns
        patterns.insert('A', [
            0b01110000, 0b10001000, 0b10001000, 0b10001000,
            0b11111000, 0b10001000, 0b10001000, 0b10001000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        patterns.insert('a', [
            0b01110000, 0b10001000, 0b10001000, 0b10001000,
            0b11111000, 0b10001000, 0b10001000, 0b10001000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert('B', [
            0b11110000, 0b10001000, 0b10001000, 0b11110000,
            0b11110000, 0b10001000, 0b10001000, 0b11110000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        patterns.insert('b', [
            0b11110000, 0b10001000, 0b10001000, 0b11110000,
            0b11110000, 0b10001000, 0b10001000, 0b11110000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert('C', [
            0b01110000, 0b10001000, 0b10000000, 0b10000000,
            0b10000000, 0b10000000, 0b10001000, 0b01110000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        patterns.insert('c', [
            0b01110000, 0b10001000, 0b10000000, 0b10000000,
            0b10000000, 0b10000000, 0b10001000, 0b01110000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert('D', [
            0b11110000, 0b10001000, 0b10001000, 0b10001000,
            0b10001000, 0b10001000, 0b10001000, 0b11110000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        patterns.insert('d', [
            0b11110000, 0b10001000, 0b10001000, 0b10001000,
            0b10001000, 0b10001000, 0b10001000, 0b11110000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert('E', [
            0b11111000, 0b10000000, 0b10000000, 0b11110000,
            0b11110000, 0b10000000, 0b10000000, 0b11111000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        patterns.insert('e', [
            0b11111000, 0b10000000, 0b10000000, 0b11110000,
            0b11110000, 0b10000000, 0b10000000, 0b11111000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert('F', [
            0b11111000, 0b10000000, 0b10000000, 0b11110000,
            0b11110000, 0b10000000, 0b10000000, 0b10000000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        patterns.insert('f', [
            0b11111000, 0b10000000, 0b10000000, 0b11110000,
            0b11110000, 0b10000000, 0b10000000, 0b10000000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert('G', [
            0b01110000, 0b10001000, 0b10000000, 0b10000000,
            0b10011000, 0b10001000, 0b10001000, 0b01110000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        patterns.insert('g', [
            0b01110000, 0b10001000, 0b10000000, 0b10000000,
            0b10011000, 0b10001000, 0b10001000, 0b01110000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert('H', [
            0b10001000, 0b10001000, 0b10001000, 0b11111000,
            0b11111000, 0b10001000, 0b10001000, 0b10001000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        patterns.insert('h', [
            0b10001000, 0b10001000, 0b10001000, 0b11111000,
            0b11111000, 0b10001000, 0b10001000, 0b10001000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert('I', [
            0b01110000, 0b00100000, 0b00100000, 0b00100000,
            0b00100000, 0b00100000, 0b00100000, 0b01110000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        patterns.insert('i', [
            0b01110000, 0b00100000, 0b00100000, 0b00100000,
            0b00100000, 0b00100000, 0b00100000, 0b01110000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert('J', [
            0b00111000, 0b00001000, 0b00001000, 0b00001000,
            0b00001000, 0b10001000, 0b10001000, 0b01110000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        patterns.insert('j', [
            0b00111000, 0b00001000, 0b00001000, 0b00001000,
            0b00001000, 0b10001000, 0b10001000, 0b01110000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert('K', [
            0b10001000, 0b10010000, 0b10100000, 0b11000000,
            0b11000000, 0b10100000, 0b10010000, 0b10001000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        patterns.insert('k', [
            0b10001000, 0b10010000, 0b10100000, 0b11000000,
            0b11000000, 0b10100000, 0b10010000, 0b10001000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert('L', [
            0b10000000, 0b10000000, 0b10000000, 0b10000000,
            0b10000000, 0b10000000, 0b10000000, 0b11111000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        patterns.insert('l', [
            0b10000000, 0b10000000, 0b10000000, 0b10000000,
            0b10000000, 0b10000000, 0b10000000, 0b11111000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert('M', [
            0b10001000, 0b11011000, 0b10101000, 0b10001000,
            0b10001000, 0b10001000, 0b10001000, 0b10001000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        patterns.insert('m', [
            0b10001000, 0b11011000, 0b10101000, 0b10001000,
            0b10001000, 0b10001000, 0b10001000, 0b10001000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert('N', [
            0b10001000, 0b11001000, 0b10101000, 0b10011000,
            0b10001000, 0b10001000, 0b10001000, 0b10001000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        patterns.insert('n', [
            0b10001000, 0b11001000, 0b10101000, 0b10011000,
            0b10001000, 0b10001000, 0b10001000, 0b10001000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert('O', [
            0b01110000, 0b10001000, 0b10001000, 0b10001000,
            0b10001000, 0b10001000, 0b10001000, 0b01110000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        patterns.insert('o', [
            0b01110000, 0b10001000, 0b10001000, 0b10001000,
            0b10001000, 0b10001000, 0b10001000, 0b01110000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert('P', [
            0b11110000, 0b10001000, 0b10001000, 0b11110000,
            0b10000000, 0b10000000, 0b10000000, 0b10000000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        patterns.insert('p', [
            0b11110000, 0b10001000, 0b10001000, 0b11110000,
            0b10000000, 0b10000000, 0b10000000, 0b10000000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert('Q', [
            0b01110000, 0b10001000, 0b10001000, 0b10001000,
            0b10101000, 0b10010000, 0b01101000, 0b00000000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        patterns.insert('q', [
            0b01110000, 0b10001000, 0b10001000, 0b10001000,
            0b10101000, 0b10010000, 0b01101000, 0b00000000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert('R', [
            0b11110000, 0b10001000, 0b10001000, 0b11110000,
            0b10100000, 0b10010000, 0b10001000, 0b10001000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        patterns.insert('r', [
            0b11110000, 0b10001000, 0b10001000, 0b11110000,
            0b10100000, 0b10010000, 0b10001000, 0b10001000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert('S', [
            0b01110000, 0b10001000, 0b10000000, 0b01110000,
            0b00001000, 0b00001000, 0b10001000, 0b01110000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        patterns.insert('s', [
            0b01110000, 0b10001000, 0b10000000, 0b01110000,
            0b00001000, 0b00001000, 0b10001000, 0b01110000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert('T', [
            0b11111000, 0b00100000, 0b00100000, 0b00100000,
            0b00100000, 0b00100000, 0b00100000, 0b00100000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        patterns.insert('t', [
            0b11111000, 0b00100000, 0b00100000, 0b00100000,
            0b00100000, 0b00100000, 0b00100000, 0b00100000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert('U', [
            0b10001000, 0b10001000, 0b10001000, 0b10001000,
            0b10001000, 0b10001000, 0b10001000, 0b01110000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        patterns.insert('u', [
            0b10001000, 0b10001000, 0b10001000, 0b10001000,
            0b10001000, 0b10001000, 0b10001000, 0b01110000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert('V', [
            0b10001000, 0b10001000, 0b10001000, 0b10001000,
            0b10001000, 0b01010000, 0b00100000, 0b00000000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        patterns.insert('v', [
            0b10001000, 0b10001000, 0b10001000, 0b10001000,
            0b10001000, 0b01010000, 0b00100000, 0b00000000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert('W', [
            0b10001000, 0b10001000, 0b10001000, 0b10001000,
            0b10101000, 0b11011000, 0b10001000, 0b00000000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        patterns.insert('w', [
            0b10001000, 0b10001000, 0b10001000, 0b10001000,
            0b10101000, 0b11011000, 0b10001000, 0b00000000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert('X', [
            0b10001000, 0b01010000, 0b00100000, 0b00100000,
            0b00100000, 0b01010000, 0b10001000, 0b00000000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        patterns.insert('x', [
            0b10001000, 0b01010000, 0b00100000, 0b00100000,
            0b00100000, 0b01010000, 0b10001000, 0b00000000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert('Y', [
            0b10001000, 0b10001000, 0b01010000, 0b00100000,
            0b00100000, 0b00100000, 0b00100000, 0b00000000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        patterns.insert('y', [
            0b10001000, 0b10001000, 0b01010000, 0b00100000,
            0b00100000, 0b00100000, 0b00100000, 0b00000000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert('Z', [
            0b11111000, 0b00001000, 0b00010000, 0b00100000,
            0b01000000, 0b10000000, 0b11111000, 0b00000000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        patterns.insert('z', [
            0b11111000, 0b00001000, 0b00010000, 0b00100000,
            0b01000000, 0b10000000, 0b11111000, 0b00000000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        // Numbers
        patterns.insert('0', [
            0b01110000, 0b10001000, 0b10011000, 0b10101000,
            0b11001000, 0b10001000, 0b01110000, 0b00000000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert('1', [
            0b00100000, 0b01100000, 0b00100000, 0b00100000,
            0b00100000, 0b00100000, 0b01110000, 0b00000000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert('2', [
            0b01110000, 0b10001000, 0b00001000, 0b00010000,
            0b00100000, 0b01000000, 0b11111000, 0b00000000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert('3', [
            0b01110000, 0b10001000, 0b00001000, 0b00110000,
            0b00001000, 0b10001000, 0b01110000, 0b00000000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert('4', [
            0b00010000, 0b00110000, 0b01010000, 0b10010000,
            0b11111000, 0b00010000, 0b00010000, 0b00000000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert('5', [
            0b11111000, 0b10000000, 0b11110000, 0b00001000,
            0b00001000, 0b10001000, 0b01110000, 0b00000000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert('6', [
            0b00110000, 0b01000000, 0b10000000, 0b11110000,
            0b10001000, 0b10001000, 0b01110000, 0b00000000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert('7', [
            0b11111000, 0b00001000, 0b00010000, 0b00100000,
            0b01000000, 0b01000000, 0b01000000, 0b00000000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert('8', [
            0b01110000, 0b10001000, 0b10001000, 0b01110000,
            0b10001000, 0b10001000, 0b01110000, 0b00000000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert('9', [
            0b01110000, 0b10001000, 0b10001000, 0b01111000,
            0b00001000, 0b00010000, 0b01100000, 0b00000000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        // Special characters
        patterns.insert(' ', [
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert('.', [
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
            0b00000000, 0b00000000, 0b01100000, 0b01100000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert(',', [
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
            0b00000000, 0b01100000, 0b01100000, 0b01000000,
            0b10000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert(':', [
            0b00000000, 0b00000000, 0b01100000, 0b01100000,
            0b00000000, 0b01100000, 0b01100000, 0b00000000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert(';', [
            0b00000000, 0b00000000, 0b01100000, 0b01100000,
            0b00000000, 0b01100000, 0b01000000, 0b10000000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert('!', [
            0b00100000, 0b00100000, 0b00100000, 0b00100000,
            0b00100000, 0b00000000, 0b00100000, 0b00000000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert('?', [
            0b01110000, 0b10001000, 0b00001000, 0b00010000,
            0b00100000, 0b00000000, 0b00100000, 0b00000000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert('(', [
            0b00010000, 0b00100000, 0b01000000, 0b01000000,
            0b01000000, 0b00100000, 0b00010000, 0b00000000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert(')', [
            0b01000000, 0b00100000, 0b00010000, 0b00010000,
            0b00010000, 0b00100000, 0b01000000, 0b00000000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert('-', [
            0b00000000, 0b00000000, 0b00000000, 0b11111000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert('_', [
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
            0b00000000, 0b00000000, 0b00000000, 0b11111000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert('/', [
            0b00000000, 0b00001000, 0b00010000, 0b00100000,
            0b01000000, 0b10000000, 0b00000000, 0b00000000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert('\\', [
            0b00000000, 0b10000000, 0b01000000, 0b00100000,
            0b00010000, 0b00001000, 0b00000000, 0b00000000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert('|', [
            0b00100000, 0b00100000, 0b00100000, 0b00100000,
            0b00100000, 0b00100000, 0b00100000, 0b00000000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert('+', [
            0b00000000, 0b00100000, 0b00100000, 0b11111000,
            0b00100000, 0b00100000, 0b00000000, 0b00000000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert('=', [
            0b00000000, 0b00000000, 0b11111000, 0b00000000,
            0b11111000, 0b00000000, 0b00000000, 0b00000000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert('<', [
            0b00010000, 0b00100000, 0b01000000, 0b10000000,
            0b01000000, 0b00100000, 0b00010000, 0b00000000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert('>', [
            0b10000000, 0b01000000, 0b00100000, 0b00010000,
            0b00100000, 0b01000000, 0b10000000, 0b00000000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        // Add missing special characters
        patterns.insert('@', [
            0b01110000, 0b10001000, 0b10101000, 0b10111000,
            0b10100000, 0b10000000, 0b01110000, 0b00000000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert('#', [
            0b01010000, 0b01010000, 0b11111000, 0b01010000,
            0b11111000, 0b01010000, 0b01010000, 0b00000000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert('$', [
            0b00100000, 0b01111000, 0b10100000, 0b01110000,
            0b00101000, 0b11110000, 0b00100000, 0b00000000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert('%', [
            0b11000000, 0b11001000, 0b00010000, 0b00100000,
            0b01000000, 0b10011000, 0b00011000, 0b00000000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert('^', [
            0b00100000, 0b01010000, 0b10001000, 0b00000000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert('&', [
            0b01100000, 0b10010000, 0b10100000, 0b01000000,
            0b10101000, 0b10010000, 0b01101000, 0b00000000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert('*', [
            0b00000000, 0b00100000, 0b10101000, 0b01110000,
            0b10101000, 0b00100000, 0b00000000, 0b00000000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert('"', [
            0b01010000, 0b01010000, 0b01010000, 0b00000000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert('{', [
            0b00110000, 0b01000000, 0b01000000, 0b10000000,
            0b01000000, 0b01000000, 0b00110000, 0b00000000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        patterns.insert('}', [
            0b11000000, 0b00100000, 0b00100000, 0b00010000,
            0b00100000, 0b00100000, 0b11000000, 0b00000000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        Self { patterns }
    }
    
    /// Draw a single character at the specified position
    pub fn draw_char(&self, frame: &mut [u8], ch: char, x: usize, y: usize, color: [u8; 3], window_width: usize) {
        let pattern = self.patterns.get(&ch).unwrap_or(&[
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
            0b00000000, 0b00000000, 0b00000000, 0b00000000,
        ]);
        
        for (row, &byte) in pattern.iter().enumerate() {
            for col in 0..8 {
                if (byte >> (7 - col)) & 1 == 1 {
                    let px = x + col;
                    let py = y + row;
                    if px < window_width && py < frame.len() / (window_width * 4) {
                        let idx = (py * window_width + px) * 4;
                        if idx + 3 < frame.len() {
                            frame[idx] = color[0];     // R
                            frame[idx + 1] = color[1]; // G
                            frame[idx + 2] = color[2]; // B
                            frame[idx + 3] = 255;      // A
                        }
                    }
                }
            }
        }
    }
    
    /// Draw text with optional background highlighting
    pub fn draw_text(&self, frame: &mut [u8], text: &str, x: usize, y: usize, color: [u8; 3], selected: bool, window_width: usize) {
        let bg_color = if selected { [80, 80, 120] } else { [0, 0, 0] };
        
        // Draw background if selected
        if selected {
            let text_width = text.len() * 8;
            let text_height = 12;
            for py in y..y + text_height {
                for px in x..x + text_width {
                    if px < window_width && py < frame.len() / (window_width * 4) {
                        let index = (py * window_width + px) * 4;
                        if index + 3 < frame.len() {
                            frame[index] = bg_color[0];
                            frame[index + 1] = bg_color[1];
                            frame[index + 2] = bg_color[2];
                        }
                    }
                }
            }
        }
        
        // Draw text characters
        for (i, ch) in text.chars().enumerate() {
            self.draw_char(frame, ch, x + i * 8, y, color, window_width);
        }
    }
    
    /// Draw text with syntax highlighting (for program editor)
    pub fn draw_syntax_highlighted_text(&self, frame: &mut [u8], text: &str, x: usize, y: usize, window_width: usize) {
        let keywords = ["def", "if", "then", "and", "set", "create", "with", "end", "hits", "times"];
        let colors = [
            "red", "green", "blue", "yellow", "cyan", "magenta", "white", "gray", "orange", "purple"
        ];
        
        let mut current_x = x;
        let mut i = 0;
        let chars: Vec<char> = text.chars().collect();
        
        while i < chars.len() {
            let mut word = String::new();
            let word_start = i;
            
            // Extract word
            while i < chars.len() && (chars[i].is_alphanumeric() || chars[i] == '_') {
                word.push(chars[i]);
                i += 1;
            }
            
            if !word.is_empty() {
                let color = if keywords.contains(&word.as_str()) {
                    [100, 200, 255] // Blue for keywords
                } else if colors.contains(&word.as_str()) {
                    [255, 150, 100] // Orange for colors
                } else if word.chars().all(|c| c.is_ascii_digit()) {
                    [150, 255, 150] // Green for numbers
                } else {
                    [200, 200, 200] // Default gray
                };
                
                for ch in word.chars() {
                    self.draw_char(frame, ch, current_x, y, color, window_width);
                    current_x += 8;
                }
            }
            
            // Handle non-word characters
            if i < chars.len() {
                self.draw_char(frame, chars[i], current_x, y, [200, 200, 200], window_width);
                current_x += 8;
                i += 1;
            }
        }
    }
    
    /// Draw a cursor at the specified position
    pub fn draw_cursor(&self, frame: &mut [u8], x: usize, y: usize, window_width: usize) {
        // Draw a simple vertical line cursor
        for dy in 0..12 {
            let py = y + dy;
            if x < window_width && py < frame.len() / (window_width * 4) {
                let idx = (py * window_width + x) * 4;
                if idx + 3 < frame.len() {
                    frame[idx] = 255;     // R - white cursor
                    frame[idx + 1] = 255; // G
                    frame[idx + 2] = 255; // B
                    frame[idx + 3] = 255; // A
                }
            }
        }
    }
}

/// Global font instance
static mut FONT_INSTANCE: Option<Font> = None;
static FONT_INIT: std::sync::Once = std::sync::Once::new();

/// Get the global font instance
pub fn get_font() -> &'static Font {
    unsafe {
        FONT_INIT.call_once(|| {
            FONT_INSTANCE = Some(Font::new());
        });
        FONT_INSTANCE.as_ref().unwrap()
    }
}

/// Convenience function to draw text using the global font
pub fn draw_text(frame: &mut [u8], text: &str, x: usize, y: usize, color: [u8; 3], selected: bool, window_width: usize) {
    get_font().draw_text(frame, text, x, y, color, selected, window_width);
}

/// Convenience function to draw a character using the global font
pub fn draw_char(frame: &mut [u8], ch: char, x: usize, y: usize, color: [u8; 3], window_width: usize) {
    get_font().draw_char(frame, ch, x, y, color, window_width);
}

/// Convenience function to draw syntax highlighted text using the global font
pub fn draw_syntax_highlighted_text(frame: &mut [u8], text: &str, x: usize, y: usize, window_width: usize) {
    get_font().draw_syntax_highlighted_text(frame, text, x, y, window_width);
}

/// Convenience function to draw a cursor using the global font
pub fn draw_cursor(frame: &mut [u8], x: usize, y: usize, window_width: usize) {
    get_font().draw_cursor(frame, x, y, window_width);
}